import logging,asyncio,random,json

from config_reader import load_config
from avito import Avito

from aiogram import Bot, types, Dispatcher
from aiogram.types import BotCommand
from aiogram.dispatcher.filters import Text, IDFilter

logging.basicConfig(format='\n%(asctime)s\n%(levelname)s:%(name)s:%(message)s\n',datefmt='%d/%m/%Y %I:%M:%S %p',level=logging.INFO)
config = load_config("config.ini")
avito=Avito(config)


async def set_commands(bot: Bot):
    commands = [
        BotCommand(command="/key", description="–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª—é—áa –∞–Ω—Ç–∏-–±–∞–Ω–∞"),
        BotCommand(command="/start", description="–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞")
    ]
    await bot.set_my_commands(commands)


async def cmd_key(message: types.Message, avito=avito):
    print('–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª—é—á–∞ –∞–Ω—Ç–∏-–±–∞–Ω–∞\n')
    avito.key=avito.get_key()
    await message.answer('–ö–ª—é—á —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω üîë ')


async def cmd_start(message: types.Message, avito=avito):
    avito.message=message
    if avito.key: await avito.get_requests()
    else:await message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /key ')

async def main(config):
    bot=Bot(token=config.tg_bot.token)
    dp=Dispatcher(bot)
    dp.register_message_handler(cmd_start,  commands="start")
    dp.register_message_handler(cmd_key, commands="key")
    await set_commands(bot)
    await dp.skip_updates()
    await dp.start_polling()


if __name__ == '__main__':
    asyncio.run(main(config))
